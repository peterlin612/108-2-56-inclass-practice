---
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
```{r}
example <- list(name = c("小明", "小花", "小新", "美美"), height = c(175, 
    166, 170, 160), weight = c(77, NA, 60, 43), birthday = lubridate::ymd(c("1998-03-11", 
    "1999-12-22", "1995-08-22", "2001-10-10")), hobby = c("美食 旅遊", "旅遊 時尚", 
    "3C 美食", "音樂 旅遊"), residence = c("Taipei", "New Taipei", "Taichung", 
    "Kaohsiung"), allowance = factor(c("0-1000", "1001-2000", "2000+", "1001-2000")), 
    bloodType = c("A", "B", "B", "O"))
```
```{r}
taller_than_170 <- example$height>= 170
pick_blood <- example$bloodType == "A"
example$name[taller_than_170 & pick_blood]

```
```{r}
studentIds <- c("410873029", "410773005", "410772035", "410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds, "(107|108)")
```


```{r}
str_view_all(studentIds, "107|108")  # 可不寫()

# 是否來自107或108學屆
str_detect(studentIds, "107|108")
```
```{r}
numbers <- c('1njfdjni','2oifnjonb','3mbodnbu4','kmoersdc')
str_view_all(numbers,"[0-9|c]")
str_detect(numbers,"[0-9]")
```
```{r}
addresses <- c("臺中市后里區公館里尾社路385號", "新竹市東區科學園路125號1樓", 
    "新竹市北區竹光路99號", "金門縣金城鎮賢庵里山前33號", "臺中市南屯區工業區二十四路23號1樓")
```
```{r}
my_regex <- paste0("[0-9]+號")
str_view_all(addresses,my_regex)
str_extract(addresses,my_regex)
```
```{r}
twDate <-  c("民國108年12月5日","民國98年10月5日")
date_regex_twyear <- "民國"
date_regex_year <- "年"
date_regex <- "[0-9]+"
regex_pattern <- glue::glue(
  "(?<={date_regex_twyear}){date_regex}"
  )
str_extract(twDate,regex_pattern)
western_year <- as.integer()
```
```{r}
char1 <- c("Wild", "Apple", "Donald", "May", "Avocada")
factor1 <- factor(char1)
levels(factor1)
```
```{r}
char2 <- c("蔡英文", "習近平", "Donald Trump", "蔡頭")
factor2 <- factor(char2)
levels(factor2)

sort(str_sub(char2, 1, 1))
sort(str_sub(char2, 2, 2))
```
```{r}
Sys.getlocale("LC_COLLATE")
```
```{r}
covid19 <- jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json")
```
```{r}
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <- factor(covid19$縣市)
covid19$性別 <- factor(covid19$性別)
covid19$是否為境外移入 <- factor(covid19$是否為境外移入)
# 可排序類別資料：年齡層
covid19$年齡層 <- factor(covid19$年齡層, ordered = TRUE)

```
```{r}
levels(covid19$縣市)
levels(covid19$性別)
levels(covid19$是否為境外移入)
```
```{r}
covid19$是否為境外移入 <- factor(covid19$是否為境外移入,c("是","否"))
levels(covid19$是否為境外移入)
```
```{r}
population <- jsonlite::fromJSON("https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1")
population <- unlist(population)
```
```{r}
levels_covid19_cities <- levels(covid19$縣市)
cities_we_need <- population[levels_covid19_cities]
sorted_cities <- sort(cities_we_need,decreasing = T)
named_sorted_cities <- names(sorted_cities)
covid19$縣市 <- factor(covid19$縣市,levels= named_sorted_cities )
levels(covid19$縣市)
```
```{r}
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(level_names, "^[0-9]+" )
startingAges <- as.integer(startingAges)
names(startingAges)<- level_names
startingAges <- sort(startingAges)
covid19$年齡層 <- factor(covid19$年齡層,names(startingAges))
levels(covid19$年齡層)
```
```{r}
factor1 <- factor(c("新北市", "台北市", "台中市", "彰化市", "基隆市", 
    "苗栗縣", "苗栗縣"))
factor1
```
```{r}
levels(factor1) <- c("中","北","中","北","北","中")
factor1
```
```{r}
covid_city <- covid19$縣市
levels_covid_city <- levels(covid_city)
northregex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middleregex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
southregex <- "嘉義市|嘉義縣|[台臺]南縣|[台臺]南市|高雄市|屏東縣|澎湖縣"
eastregex <- "花蓮縣|台東縣"
levels_covid_city <- str_replace(levels_covid_city,northregex,"北部")
factor(levels_covid_city)
```
```{r}
replacelevels <- levels(covid19$年齡層)
replacelevels[c(1,2)] <- "0-9"
replacelevels[c(3,4)] <- "10-19"
replacelevels[c(5,6)] <- "20-29"
replacelevels[c(7,8)] <- "30-39"
replacelevels[c(9,10)] <- "40-49"
replacelevels[c(11,12)] <- "50-59"
replacelevels[c(13,14)] <- "60-69"
levels(covid19$年齡層)
covid19$年齡層
```
```{r}
factor2 <- factor(c("好", "好", "普通", "普通", "好"))
levels(factor2) <- c(levels(factor2),"差")
levels(factor2)
```
```{r}
example <- list(name = c("小明", "小花", "小新", "美美"), height = c(175, 
    166, 170, 160), weight = c(77, NA, 60, 43), birthday = lubridate::ymd(c("1998-03-11", 
    "1999-12-22", "1995-08-22", "2001-10-10")), hobby = c("美食 旅遊", "旅遊 時尚", 
    "3C 美食", "音樂 旅遊"), residence = c("Taipei", "New Taipei", "Taichung", 
    "Kaohsiung"), allowance = factor(c("0-1000", "1001-2000", "2000+", "1001-2000")), 
    bloodType = c("A", "B", "B", "O"))
```
```{r}
pick_shin <- example$name =="小新"
map(example,~.x [pick_shin])
```
```{r}
dance <- jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", 
    simplifyDataFrame = F)
```
```{r}
# 記載第一個表演的所有場次訊息
dance[[1]]$showInfo
str(dance[[1]]$showInfo)
# 計算第一個表演有幾個場次
length(dance[[1]]$showInfo)
# 計算第二個表演有幾個場次
length(dance[[2]]$showInfo)

```
```{r}
map(dance[[4]]$showInfo,~.x$time)
```
```{r}
threeHeigths <- c(Gary=178, John=182, Cam=175)
sort(threeHeigths,decreasing = T) %>%
  names(.)%>%
  .[[1]]

```
```{r}
# 由cities創出每個元素對應的北部、東部、中部region factor
cities <- factor(c("台北","花蓮","台東","台中"))
levels(cities)
region <- cities

# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
str_replace(currentLevels1,"花蓮|台東","東部") -> currentLevels2
str_replace(currentLevels2,"台中","中部") -> regionLevels
regionLevels -> levels(region)
```
```{r}
str_replace(currentLevels,"台北","北部")%>%
  str_replace(.,"台中","中部") ->regionLevels
levels(region)
  
```
```{r}

demand_return <- function(p)
  {q_d <- 10-5*p 
return(q_d)}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
```
```{r}
quantity_supply <- function(p){q_s <- 1+5*p
return(q_s)}
quantity_supply(1.2)
```

```{r}
my_money <- 10
my_coin <- 1
my_total_money <- function(m){
  m_m <- my_money*m+my_coin
return(m_m)
}
```
```{r}
my_total_money(2)
```
```{r}
twDate <-  c("民國108年12月5日","民國98年10月5日")

library(stringr)
# 準備regex: 
## 取出：「前有」民國，「後有」年的「數字」「們」
## "(?<={A_regex}){target_regex}(?={B_regex})"

target_regex <- "[0-9]+"
A_regex <- "民國"
B_regex <- "年"

regex_pattern <- glue::glue(
  "(?<={A_regex}){target_regex}(?={B_regex})"
  )

print(regex_pattern)

## 如果同學已經很熟就可以直接寫
regex_pattern <-
  "(?<=民國)[0-9]+(?=年)"

# 取出民國年，計算西元年
year <- 
  str_extract(
    twDate,
    regex_pattern)
westernYear <- as.integer(year)+1911

# 替換民國xx年的xx成西元年數字
str_replace(
  twDate,
  regex_pattern,  # 要換掉的文字
  as.character(westernYear) # 要替換的內容
) -> twDate_reformat
print(twDate_reformat)


lubridate::ymd(twDate_reformat)
```
```{r}
readline("請輸入你的成績") -> grade 
grade
```
```{r}
if(grade >= 90){print("優")
}else if (grade >=80 & grade <= 89){print("良")
  }else{print("待加強")}
```
```{r}
myFun <- function(x,y){
  return(x**y+15)
}

# 等同於
myFun2 <- function(x,y){
  x**y+15
}

myFun(5,3) -> outcome
myFun2(5,3) -> outcome2

```
```{r}

```

```{r}
grade <- sample(1:100, 10, replace=T)


  cut(c(-1,69,79,89,100)) -> grade

levels(grade)

switch(
  as.character(grade[[1]]),
  "(-1,69]"={
    print("-_-")
    "F"},
  "(69,79]"={
    print("棒")
    "C"
    },
  "(79,89]"={
    print("好棒")
    "B"
    },
  "(89,100]"={
    print("好棒棒")
    "A"
    }
) -> letterGrade # 有回存時要螢幕印出的訊息一定要加print

```


